AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: transcriber
    Description: Transcriber API
    Author: jakep
    SemanticVersion: 0.1.0

Globals:
  Api:
    BinaryMediaTypes:
      - "multipart/form-data"
Parameters:
  StageName:
    Type: String
    Default: local
    AllowedValues:
      - local
      - dev
      - staging
      - prod
  TranscriberConfiguration:
    Type: String
    Default: testing
  AccountId:
    Type: String
    Default: testing
  Auth0Audience:
    Type: String
    Default: "https://extension.artificially-intelligent.io/api"
  Auth0Domain:
    Type: String
    Default: testId
  Auth0ClientId:
    Type: String
    Default: testId
  OpenaiApiKey:
    Type: String
    Default: testId
  Auth0MgmtClientId:
    Type: String
    Default: testId
  Auth0MgmtClientSecret:
    Type: String
    Default: testId
  StripeSecretKey:
    Type: String
    Default: testId
  StripePublishableKey:
    Type: String
    Default: testId

Mappings:
  EnvMappings:
    local:
      tagenv: local
      env: local
      REGION: us-west-2
      subnet1: subnet-0d4949bd0dabd0172
      subnet2: subnet-0cece01f2d6f145fd
      vpcId: vpc-0148cf94021c2fa5a
      logLevel: DEBUG
    dev:
      tagenv: development
      env: development
      REGION: us-west-2
      subnet1: subnet-0d4949bd0dabd0172
      subnet2: subnet-0cece01f2d6f145fd
      vpcId: vpc-0148cf94021c2fa5a
      logLevel: DEBUG
    staging:
      tagenv: staging
      env: staging
      REGION: us-west-2
      subnet1: subnet-0d4949bd0dabd0172
      subnet2: subnet-0cece01f2d6f145fd
      vpcId: vpc-0148cf94021c2fa5a
      logLevel: DEBUG
    prod:
      tagenv: production
      env: prod
      REGION: us-west-2
      subnet1: subnet-0149c6becff2735ce
      subnet2: subnet-0bdc6a89ca07edc88
      vpcId: vpc-0c561ddff33cdb10d
      logLevel: INFO

Resources:
  TranscriberSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to metadata db
      VpcId: !FindInMap [EnvMappings, !Ref StageName, vpcId]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${StageName}-TranscriberApiLogs
      RetentionInDays: 1096

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub Transcriber ${StageName}
      Description: !Sub ${StageName} - An API Gateway and Lambda Integration for REST API
      StageName: !Ref StageName

  TranscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref TranscriberSecurityGroup
        SubnetIds:
          - !FindInMap [EnvMappings, !Ref StageName, subnet1]
          - !FindInMap [EnvMappings, !Ref StageName, subnet2]
      PackageType: Image
      Environment:
        Variables:
          REGION_NAME: !FindInMap [EnvMappings, !Ref StageName, REGION]
          TRANSCRIBER_CONFIGURATION: !Ref TranscriberConfiguration
          LOG_LEVEL: !FindInMap [EnvMappings, !Ref StageName, logLevel]
          AUTH0_DOMAIN: !Ref Auth0Domain
          AUTH0_CLIENT_ID: !Ref Auth0ClientId
          AUTH0_AUDIENCE: !Ref Auth0Audience
          OPENAI_API_KEY: !Ref OpenaiApiKey
          STAGE_NAME: !Ref StageName
          AUTH0_MGMT_CLIENT_ID: !Ref Auth0MgmtClientId
          AUTH0_MGMT_CLIENT_SECRET: !Ref Auth0MgmtClientSecret
          REACT_APP_STRIPE_PUBLIC_KEY: !Ref StripePublishableKey
          REACT_APP_STRIPE_CLIENT_SECRET: !Ref StripeSecretKey
      Events:
        CatchAll:
          Type: Api
          Properties:
            Method: ANY
            Path: /{proxy+}
            RestApiId: !Ref Api
        Root:
          Type: Api
          Properties:
            Method: ANY
            Path: /
            RestApiId: !Ref Api
      Role: !Join
        - ""
        - - "arn:aws:iam::"
          - !Ref AccountId
          - ":role/DynamoDatabasesAccessRole"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource:
                - Fn::Sub:
                  - "arn:aws:s3:::${Bucket}/*"
                  - Bucket: !FindInMap [EnvMappings, !Ref StageName, dev-transcriptions-ai]
    Metadata:
      DockerTag: latest
      DockerContext: ./
      Dockerfile: Dockerfile
